# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright Â© 2024-2025 The TokTok team

FROM alpine:edge AS common

RUN ["apk", "add", \
 "bash", \
 "ccache", \
 "clang", \
 "cmake", \
 "curl", \
 "file", \
 "git", \
 "linux-headers", \
 "pkgconf", \
 "python3", \
 "samurai"]

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ENV CC=clang CXX=clang++ SYSROOT=/sysroot
ENV PKG_CONFIG_PATH=$SYSROOT/usr/lib/pkgconfig:$SYSROOT/usr/lib64/pkgconfig:$SYSROOT/usr/share/pkgconfig

ENV CFLAGS="-fPIC -O2"
ENV CXXFLAGS="$CFLAGS"

COPY toolchain/linux-static-toolchain.cmake $SYSROOT/static-toolchain.cmake

FROM common AS base

RUN ["apk", "add", \
 "autoconf", \
 "automake", \
 "bison", \
 "diffutils", \
 "flex", \
 "libtool", \
 "libxslt", \
 "make", \
 "meson", \
 "py3-mako", \
 "py3-packaging", \
 "py3-yaml", \
 "python3-dev", \
 "tcl", \
 "yasm"]

WORKDIR /opt/buildhome/build

# Build gettext at the front because it's needed by multiple paths.
RUN tar zxf <(curl -L https://ftp.gnu.org/pub/gnu/gettext/gettext-0.22.5.tar.gz) \
 gettext-0.22.5/build-aux \
 gettext-0.22.5/gettext-runtime \
 gettext-0.22.5/m4 \
 gettext-0.22.5/.version \
 && cd gettext-0.22.5/gettext-runtime \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-toxcore

RUN tar zxf <(curl -L https://github.com/jedisct1/libsodium/releases/download/1.0.20-RELEASE/libsodium-1.0.20.tar.gz) \
 && cd libsodium-1.0.20 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/xiph/opus/releases/download/v1.5.2/opus-1.5.2.tar.gz) \
 && cd opus-1.5.2 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/webmproject/libvpx/archive/refs/tags/v1.15.0.tar.gz) \
 && cd libvpx-1.15.0 \
 && ./configure --prefix="$SYSROOT/usr" --disable-examples --disable-unit-tests --enable-pic \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/TokTok/c-toxcore/releases/download/v0.2.20/c-toxcore-0.2.20.tar.gz) \
 && cd c-toxcore-0.2.20 \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$SYSROOT/static-toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DENABLE_SHARED=OFF \
  -GNinja \
  -B_build \
  -H. \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /opt/buildhome/build

FROM base AS build-audio

RUN tar zxf <(curl -L https://github.com/alsa-project/alsa-lib/archive/refs/tags/v1.2.13.tar.gz) \
 && cd alsa-lib-* \
 && autoreconf -fi \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared --disable-python --without-libdl CFLAGS="$CFLAGS -Dpage_size=alsa_page_size" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar Jxf <(curl -L https://github.com/libsndfile/libsndfile/releases/download/1.2.2/libsndfile-1.2.2.tar.xz) \
 && cd libsndfile-* \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$SYSROOT/static-toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DENABLE_STATIC_RUNTIME=ON \
  -DBUILD_TESTING=OFF \
  -DBUILD_SHARED_LIBS=OFF \
  -DBUILD_EXAMPLES=OFF \
  -DBUILD_PROGRAMS=OFF \
  -DCMAKE_C_FLAGS="$CFLAGS" \
  -GNinja \
  -B_build \
  -H. \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://freedesktop.org/software/pulseaudio/releases/pulseaudio-17.0.tar.gz) \
 && cd pulseaudio-* \
 && sed -i -e 's/= *shared_library(/= library(/g' $(find . -name "meson.build") \
 && CFLAGS="$CFLAGS -I$SYSROOT/usr/include" LDFLAGS="-L$SYSROOT/usr/lib -lintl" meson setup build/ -Ddefault_library=static --prefix="$SYSROOT/usr" -Ddaemon=false -Ddoxygen=false -Dman=false -Dtests=false \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/PortAudio/portaudio/archive/refs/tags/v19.7.0.tar.gz) \
 && cd portaudio-* \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared --with-alsa \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-udev

RUN tar zxf <(curl -L https://github.com/eudev-project/eudev/releases/download/v3.2.14/eudev-3.2.14.tar.gz) \
 && cd eudev-* \
 && apk add gperf \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && apk del gperf \
 && rm -rf /opt/buildhome/build

RUN tar jxf <(curl -L https://bitmath.org/code/mtdev/mtdev-1.1.6.tar.bz2) \
 && cd mtdev-* \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar Jxf <(curl -L https://www.freedesktop.org/software/libevdev/libevdev-1.12.1.tar.xz) \
 && cd libevdev-* \
 && meson setup build/ -Ddefault_library=static -Ddocumentation=disabled -Dtests=disabled --prefix="$SYSROOT/usr" \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://gitlab.freedesktop.org/libinput/libinput/-/archive/1.27.0/libinput-1.27.0.tar.gz) \
 && cd libinput-* \
 && sed -i -e 's/= *shared_library(/= library(/g' $(find . -name "meson.build") \
 && meson setup build/ -Ddefault_library=static -Ddebug-gui=false -Dlibwacom=false -Dtests=false --prefix="$SYSROOT/usr" \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

FROM base AS build-zstd

RUN tar zxf <(wget -O- https://github.com/facebook/zstd/releases/download/v1.5.6/zstd-1.5.6.tar.gz) \
 && cd zstd-* \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$SYSROOT/static-toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DZSTD_BUILD_SHARED=OFF \
  -GNinja \
  -B_build \
  -Hbuild/cmake \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /opt/buildhome/build

FROM base AS build-deps

RUN tar jxf <(curl -L https://github.com/libexif/libexif/releases/download/v0.6.24/libexif-0.6.24.tar.bz2) \
 && cd libexif-0.6.24 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/fukuchi/libqrencode/archive/refs/tags/v4.1.1.tar.gz) \
 && cd libqrencode-4.1.1 \
 && autoreconf -fi \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared --without-png \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-icu

RUN tar zxf <(curl -L https://github.com/unicode-org/icu/releases/download/release-72-1/icu4c-72_1-src.tgz) \
 && cd icu/source \
 && ./runConfigureICU Linux --enable-static --disable-shared --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-sqlcipher

RUN tar zxf <(curl -L https://github.com/openssl/openssl/releases/download/openssl-3.4.0/openssl-3.4.0.tar.gz) \
 && cd openssl-3.4.0 \
 && ./Configure linux-x86_64-clang --prefix="$SYSROOT/usr" -no-shared -no-tests -fPIC \
 && make -j"$(nproc)" \
 && make install_sw \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/sqlcipher/sqlcipher/archive/refs/tags/v4.6.1.tar.gz) \
 && cd sqlcipher-4.6.1 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared LDFLAGS="-L$SYSROOT/usr/lib64" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-tslib

RUN tar zxf <(curl -L https://github.com/BLAKE2/libb2/releases/download/v0.98.1/libb2-0.98.1.tar.gz) \
 && cd libb2-* \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/libts/tslib/releases/download/1.23/tslib-1.23.tar.gz) \
 && cd tslib-* \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-ffi

RUN tar zxf <(curl -L https://github.com/libffi/libffi/releases/download/v3.4.6/libffi-3.4.6.tar.gz) \
 && cd libffi-3.4.6 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared --enable-portable-binary --enable-pax_emutramp --disable-exec-static-tramp \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-xproto

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/proto/xorgproto-2024.1.tar.gz) \
 && cd xorgproto-2024.1 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/proto/randrproto-1.5.0.tar.gz) \
 && cd randrproto-1.5.0 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/proto/renderproto-0.11.tar.gz) \
 && cd renderproto-0.11 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-proto-1.17.0.tar.gz) \
 && cd xcb-proto-1.17.0 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/proto/xineramaproto-1.2.1.tar.gz) \
 && cd xineramaproto-1.2.1 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-glib

RUN tar Jxf <(curl -L https://download.gnome.org/sources/glib/2.83/glib-2.83.0.tar.xz) \
 && cd glib-2.83.0 \
 && LDFLAGS="-static-pie" meson setup build/ -Ddefault_library=static --prefix="$SYSROOT/usr" -Dtests=false -Dglib_debug=disabled \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

FROM base AS build-libxml

RUN tar zxf <(curl -L https://github.com/libexpat/libexpat/releases/download/R_2_6_4/expat-2.6.4.tar.gz) \
 && cd expat-2.6.4 \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$SYSROOT/static-toolchain.cmake" \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUILD_SHARED_LIBS=OFF \
  -GNinja \
  -B_build \
  -H. \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://github.com/GNOME/libxml2/archive/refs/tags/v2.13.5.tar.gz) \
 && cd libxml2-2.13.5 \
 && autoreconf -fi \
 && ./configure --prefix="$SYSROOT/usr" --with-sysroot="$SYSROOT" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

FROM base AS build-x11

RUN tar Jxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libpciaccess-0.18.1.tar.xz) \
 && cd libpciaccess-0.18.1 \
 && meson setup _build --prefix="$SYSROOT/usr" --default-library=static \
 && ninja -C _build install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/util/util-macros-1.20.2.tar.gz) \
 && cd util-macros-1.20.2 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/libpthread-stubs-0.5.tar.gz) \
 && cd libpthread-stubs-0.5 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

COPY --from=build-xproto $SYSROOT/usr $SYSROOT/usr

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXau-1.0.11.tar.gz) \
 && cd libXau-1.0.11 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/libxcb-1.17.0.tar.gz) \
 && cd libxcb-1.17.0 \
 && ./configure --prefix="$SYSROOT/usr" --enable-xkb --enable-glx --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/xtrans-1.5.2.tar.gz) \
 && cd xtrans-1.5.2 \
 && ./configure --prefix="$SYSROOT/usr" \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libX11-1.8.tar.gz) \
 && cd libX11-1.8 \
 && ./configure --prefix="$SYSROOT/usr" --with-sysroot="$SYSROOT" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

COPY --from=build-ffi $SYSROOT/usr $SYSROOT/usr

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXrender-0.9.11.tar.gz) \
 && cd libXrender-0.9.11 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXext-1.3.6.tar.gz) \
 && cd libXext-1.3.6 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXrandr-1.5.4.tar.gz) \
 && cd libXrandr-1.5.4 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXinerama-1.1.5.tar.gz) \
 && cd libXinerama-1.1.5 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXfixes-6.0.1.tar.gz) \
 && cd libXfixes-6.0.1 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXcursor-1.2.3.tar.gz) \
 && cd libXcursor-1.2.3 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xorg.freedesktop.org/archive/individual/lib/libXi-1.8.2.tar.gz) \
 && cd libXi-1.8.2 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar Jxf <(curl -L https://dri.freedesktop.org/libdrm/libdrm-2.4.123.tar.xz) \
 && cd libdrm-2.4.123 \
 && meson setup _build --prefix="$SYSROOT/usr" --default-library=static -Dintel=enabled -Dtests=false \
 && ninja -C _build install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://xorg.freedesktop.org/archive/individual/lib/libxshmfence-1.3.2.tar.gz) \
 && cd libxshmfence-1.3.2 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://xorg.freedesktop.org/archive/individual/lib/libXxf86vm-1.1.5.tar.gz) \
 && cd libXxf86vm-1.1.5 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl -L https://xorg.freedesktop.org/archive/individual/lib/libXScrnSaver-1.2.4.tar.gz) \
 && cd libXScrnSaver-* \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

COPY --from=build-libxml $SYSROOT/usr $SYSROOT/usr

RUN git clone --depth=1 https://gitlab.freedesktop.org/wayland/wayland.git \
 && cd wayland \
 && meson setup build/ -Ddefault_library=static -Ddocumentation=false -Dtests=false --prefix="$SYSROOT/usr" \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

RUN git clone --depth=1 https://gitlab.freedesktop.org/wayland/wayland-protocols.git \
 && cd wayland-protocols \
 && meson setup build/ -Ddefault_library=static -Dtests=false --prefix="$SYSROOT/usr" \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

RUN tar Jxf <(curl -L https://xkbcommon.org/download/libxkbcommon-1.7.0.tar.xz) \
 && cd libxkbcommon-1.7.0 \
 && LDFLAGS="-lXau -L$SYSROOT/usr/lib" meson setup build/ -Ddefault_library=static --prefix="$SYSROOT/usr" -Denable-tools=false -Dxkb-config-root="/usr/share/X11/xkb" -Dx-locale-root="/usr/share/X11/locale" -Dsysconfdir="/etc" \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-util-renderutil-0.3.10.tar.gz) \
 && cd xcb-util-renderutil-0.3.10 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-util-0.4.1.tar.gz) \
 && cd xcb-util-0.4.1 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-util-image-0.4.1.tar.gz) \
 && cd xcb-util-image-0.4.1 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-util-cursor-0.1.5.tar.gz) \
 && cd xcb-util-cursor-0.1.5 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-util-keysyms-0.4.1.tar.gz) \
 && cd xcb-util-keysyms-0.4.1 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

RUN tar zxf <(curl https://xcb.freedesktop.org/dist/xcb-util-wm-0.4.2.tar.gz) \
 && cd xcb-util-wm-0.4.2 \
 && ./configure --prefix="$SYSROOT/usr" --disable-shared \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

COPY --from=build-glib $SYSROOT/usr $SYSROOT/usr

RUN tar Jxf <(curl -L https://dbus.freedesktop.org/releases/dbus/dbus-1.16.0.tar.xz) \
 && cd dbus-* \
 && CFLAGS="-I$SYSROOT/usr/include" LDFLAGS="-lxcb -L$SYSROOT/usr/lib" meson setup build/ -Ddefault_library=static --prefix="$SYSROOT/usr" -Dtools=false \
 && ninja -C build/ install \
 && rm -rf /opt/buildhome/build

# XXX: Hack to get Qt closer to being able to build with DBus support.
RUN sed -i -e 's/ -pthread//g' "$SYSROOT/usr/lib/pkgconfig/dbus-1.pc"

COPY --from=build-udev $SYSROOT/usr $SYSROOT/usr
COPY --from=build-icu $SYSROOT/usr $SYSROOT/usr
COPY --from=build-sqlcipher $SYSROOT/usr $SYSROOT/usr
COPY --from=build-tslib $SYSROOT/usr $SYSROOT/usr
COPY --from=build-zstd $SYSROOT/usr $SYSROOT/usr

FROM build-x11 AS build-qt

ENV CXXFLAGS="-DQT_MESSAGELOGCONTEXT"
ENV OBJCXXFLAGS="$CXXFLAGS"

COPY download/version_qt.sh /opt/buildhome/

RUN . /opt/buildhome/version_qt.sh \
 && tar Jxf <(curl -L "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qtbase-everywhere-src-$QT_VERSION.tar.xz") \
 && mv qtbase-everywhere-src-* qtbase && mkdir qtbase/_build && cd qtbase/_build \
 && ../configure \
    -prefix "$SYSROOT/opt/qt" \
    -appstore-compliant \
    -static \
    -release \
    -force-asserts \
    -qt-doubleconversion \
    -qt-freetype \
    -qt-harfbuzz \
    -qt-libjpeg \
    -qt-libpng \
    -qt-pcre \
    -qt-zlib \
    -no-feature-androiddeployqt \
    -no-feature-brotli \
    -no-feature-macdeployqt \
    -no-feature-printsupport \
    -no-feature-qmake \
    -no-feature-sql \
    -no-egl \
    -no-glib \
    -no-opengl \
    -no-vulkan \
    -openssl-linked \
    -nomake examples \
    -nomake tests \
    -xcb \
    -- \
    -DCMAKE_FIND_ROOT_PATH="$SYSROOT/usr" \
    -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
    -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
    -DTEST_xcb_syslibs=TRUE \
    -Wno-dev \
 && cat config.summary \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /opt/buildhome/build

RUN . /opt/buildhome/version_qt.sh \
 && tar Jxf <(curl -L "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qttools-everywhere-src-$QT_VERSION.tar.xz") \
 && mv qttools-everywhere-src-* qttools && mkdir qttools/_build && cd qttools/_build \
 && "$SYSROOT/opt/qt/bin/qt-configure-module" .. \
    -no-feature-assistant \
    -no-feature-designer \
    -no-feature-kmap2qmap \
    -no-feature-pixeltool \
    -no-feature-qdbus \
    -no-feature-qdoc \
    -no-feature-qev \
    -no-feature-qtattributionsscanner \
    -no-feature-qtdiag \
    -no-feature-qtplugininfo \
    -- \
    -DCMAKE_FIND_ROOT_PATH="$SYSROOT/usr" \
    -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
    -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
    -Wno-dev \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /opt/buildhome/build

RUN . /opt/buildhome/version_qt.sh \
 && tar Jxf <(curl -L "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qtsvg-everywhere-src-$QT_VERSION.tar.xz") \
 && mv qtsvg-everywhere-src-* qtsvg && mkdir qtsvg/_build && cd qtsvg/_build \
 && "$SYSROOT/opt/qt/bin/qt-configure-module" .. \
    -- \
    -DCMAKE_FIND_ROOT_PATH="$SYSROOT/usr" \
    -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
    -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
    -Wno-dev \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /opt/buildhome/build

RUN . /opt/buildhome/version_qt.sh \
 && tar Jxf <(curl -L "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qtimageformats-everywhere-src-$QT_VERSION.tar.xz") \
 && mv qtimageformats-everywhere-src-* qtimageformats && mkdir qtimageformats/_build && cd qtimageformats/_build \
 && "$SYSROOT/opt/qt/bin/qt-configure-module" .. \
    -- \
    -DCMAKE_FIND_ROOT_PATH="$SYSROOT/usr" \
    -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
    -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
    -Wno-dev \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /opt/buildhome/build

RUN . /opt/buildhome/version_qt.sh \
 && tar Jxf <(curl -L "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qtwayland-everywhere-src-$QT_VERSION.tar.xz") \
 && mv qtwayland-everywhere-src-* qtwayland && mkdir qtwayland/_build && cd qtwayland/_build \
 && "$SYSROOT/opt/qt/bin/qt-configure-module" .. \
    -- \
    -DCMAKE_FIND_ROOT_PATH="$SYSROOT/usr" \
    -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
    -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
    -Wno-dev \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /opt/buildhome/build

FROM build-x11 AS build-av

RUN mv /usr/bin/pkg-config /usr/bin/pkg-config.real
COPY pkg-config-static /usr/bin/pkg-config
RUN chmod 0755 /usr/bin/pkg-config

# Needs X, so we build it at the end.
RUN tar Jxf <(curl -L https://www.ffmpeg.org/releases/ffmpeg-7.1.tar.xz) \
 && cd ffmpeg-7.1 \
 && ./configure \
 --prefix="$SYSROOT/usr" \
 --disable-shared \
 --disable-debug \
 --disable-programs \
 --disable-protocols \
 --disable-doc \
 --disable-sdl2 \
 --disable-avfilter \
 --disable-filters \
 --disable-iconv \
 --disable-network \
 --disable-muxers \
 --disable-postproc \
 --disable-swresample \
 --disable-swscale-alpha \
 --disable-dwt \
 --disable-lsp \
 --disable-faan \
 --disable-vaapi \
 --disable-vdpau \
 --disable-zlib \
 --disable-xlib \
 --disable-bzlib \
 --disable-lzma \
 --disable-encoders \
 --disable-decoders \
 --disable-demuxers \
 --disable-parsers \
 --disable-bsfs \
 --enable-demuxer=h264 \
 --enable-demuxer=mjpeg \
 --enable-parser=h264 \
 --enable-parser=mjpeg \
 --enable-decoder=h264 \
 --enable-decoder=mjpeg \
 --enable-decoder=rawvideo \
 --enable-libxcb \
 --enable-libxcb-shm \
 --enable-libxcb-xfixes \
 --enable-libxcb-shape \
 || (cat ffbuild/config.log && false) \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /opt/buildhome/build

COPY --from=build-audio $SYSROOT/usr $SYSROOT/usr

# Needs dbus, so we build it at the end.
RUN tar zxf <(curl -L https://github.com/kcat/openal-soft/archive/refs/tags/1.24.1.tar.gz) \
 && cd openal-soft-* \
 && cmake -Wno-dev \
  -DCMAKE_TOOLCHAIN_FILE="$SYSROOT/static-toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DLIBTYPE=STATIC \
  -DALSOFT_EXAMPLES=OFF \
  -DALSOFT_DLOPEN=OFF \
  -DALSOFT_INSTALL_HRTF_DATA=OFF \
  -DALSOFT_RTKIT=ON \
  -DALSOFT_UTILS=OFF \
  -DALSOFT_REQUIRE_ALSA=TRUE \
  -DALSOFT_REQUIRE_PORTAUDIO=TRUE \
  -DALSOFT_REQUIRE_PULSEAUDIO=TRUE \
  -DALSOFT_REQUIRE_RTKIT=TRUE \
  -DALSOFT_REQUIRE_SSE=TRUE \
  -DALSOFT_REQUIRE_SSE2=TRUE \
  -DALSOFT_REQUIRE_SSE3=TRUE \
  -DALSOFT_REQUIRE_SSE4_1=TRUE \
  -GNinja \
  -B_build \
  . \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /opt/buildhome/build

# Final image
FROM common

COPY --from=build-av $SYSROOT $SYSROOT
COPY --from=build-qt $SYSROOT/opt/qt $SYSROOT/opt/qt
COPY --from=build-deps $SYSROOT/usr $SYSROOT/usr
COPY --from=build-toxcore $SYSROOT/usr $SYSROOT/usr

RUN chmod 0644 "$SYSROOT/static-toolchain.cmake"

RUN mv /usr/bin/clang++ /usr/bin/clang++.real
COPY clang-pc-fixer /usr/bin/clang++
RUN chmod 0755 /usr/bin/clang++

WORKDIR /qtox
ENV HOME=/qtox
