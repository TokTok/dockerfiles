# SPDX-License-Identifier: GPL-3.0-or-later.
# Copyright Â© 2024-2025 The TokTok team

ARG QT_VERSION=6.2.4

# Build Qt for the host system.
FROM toxchat/qtox:host-qt_$QT_VERSION AS host-qt
# Build the rest (including another Qt) for Android.
FROM ubuntu:24.04 AS base

# No Qt from Ubuntu here.
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --no-install-recommends -y \
 "autoconf" \
 "automake" \
 "build-essential" \
 "bzip2" \
 "ca-certificates" \
 "ccache" \
 "clang" \
 "cmake" \
 "g++" \
 "gcc" \
 "git" \
 "libtool" \
 "make" \
 "ninja-build" \
 "openjdk-17-jdk-headless" \
 "pkg-config" \
 "tcl" \
 "unzip" \
 "wget" \
 "xz-utils" \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /work/build
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

WORKDIR /work/android/sdk
RUN wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip \
 && unzip commandlinetools-linux-11076708_latest.zip \
 && rm commandlinetools-linux-11076708_latest.zip \
 && mv cmdline-tools tools \
 && mkdir cmdline-tools \
 && mv tools cmdline-tools

ENV ANDROID_SDK_HOME=/work/android/sdk
ENV PATH=$ANDROID_SDK_HOME/cmdline-tools/tools/bin:$PATH

RUN yes | sdkmanager --licenses || true
RUN ["sdkmanager", "platform-tools", "platforms;android-34", "build-tools;34.0.0"]

ARG NDK_VERSION=21.3.6528147
RUN sdkmanager "ndk;$NDK_VERSION"

ENV ANDROID_NDK_ROOT=$ANDROID_SDK_HOME/ndk/$NDK_VERSION
ENV TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64
ENV PATH=$TOOLCHAIN/bin:$PATH
ENV SYSROOT=$TOOLCHAIN/sysroot
ENV PKG_CONFIG_PATH=$SYSROOT/usr/lib/pkgconfig

ARG ANDROID_API=24

ARG ANDROID_ABI=arm64-v8a

# OpenSSL
#FROM base AS build-openssl

ARG ANDROID_OPENSSL_ABI=arm64
ARG ANDROID_OPENSSL_ASM=
RUN tar zxf <(wget -O- https://github.com/openssl/openssl/releases/download/openssl-3.4.0/openssl-3.4.0.tar.gz) \
 && cd openssl-3.4.0 \
 && ./Configure "android-$ANDROID_OPENSSL_ABI" --prefix="$SYSROOT/usr" -no-shared -no-tests $ANDROID_OPENSSL_ASM -D__ANDROID_API__="$ANDROID_API" -fPIC \
 && make "-j$(nproc)" \
 && make install_sw \
 && rm -rf /work/build

# zstd
#FROM base AS build-zstd

RUN tar zxf <(wget -O- https://github.com/facebook/zstd/releases/download/v1.5.6/zstd-1.5.6.tar.gz) \
 && cd zstd-1.5.6 \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX:PATH="$SYSROOT/usr" \
  -DANDROID_ABI="$ANDROID_ABI" \
  -DANDROID_PLATFORM="$ANDROID_API" \
  -DZSTD_BUILD_SHARED=OFF \
  -GNinja \
  -B_build \
  -Hbuild/cmake \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /work/build

# Qt
#FROM base AS build-qt

#COPY --from=build-openssl $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-zstd $SYSROOT/usr $SYSROOT/usr
COPY --from=host-qt /work/host /work/host

ARG QT_BUILD_TYPE=release

ARG QT_VERSION=6.2.4

RUN tar Jxf <(wget -O- "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qtbase-everywhere-src-$QT_VERSION.tar.xz") \
 && sed -i -e 's!# *define QLOGGING_HAVE_BACKTRACE!//&!' qtbase-everywhere-src-*/src/corelib/global/qlogging.cpp \
 && cd qtbase-everywhere-src-* && mkdir _build && cd _build \
 && ../configure -prefix "/work/android/qt" \
    "-$QT_BUILD_TYPE" \
    -qt-host-path /work/host/qt \
    -android-abis "$ANDROID_ABI" \
    -android-sdk "$ANDROID_SDK_HOME" \
    -android-ndk "$ANDROID_NDK_ROOT" \
    -android-ndk-platform "android-$ANDROID_API" \
    -openssl-linked \
    -feature-zstd \
    -nomake examples \
    -nomake tests \
    -no-feature-sharedmemory \
    -no-feature-sql \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /work/build

RUN tar Jxf <(wget -O- "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qttools-everywhere-src-$QT_VERSION.tar.xz") \
 && cd qttools-everywhere-src-* && mkdir _build && cd _build \
 && /work/android/qt/bin/qt-configure-module .. \
    -no-feature-assistant \
    -no-feature-pixeltool \
    -no-feature-qdbus \
    -no-feature-qtdiag \
    -no-feature-qtplugininfo \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /work/build

RUN tar Jxf <(wget -O- "https://download.qt.io/archive/qt/$(echo "$QT_VERSION" | grep -o '...')/$QT_VERSION/submodules/qtsvg-everywhere-src-$QT_VERSION.tar.xz") \
 && cd qtsvg-everywhere-src-* && mkdir _build && cd _build \
 && /work/android/qt/bin/qt-configure-module .. \
 && cmake --build . \
 && cmake --install . \
 && rm -rf /work/build

# Base for the rest of the builds
#FROM base AS build-base

ARG ANDROID_TRIPLE=aarch64-linux-android
ENV ANDROID_TRIPLE_API=$ANDROID_TRIPLE$ANDROID_API
ENV CC=$TOOLCHAIN/bin/$ANDROID_TRIPLE_API-clang \
    CXX=$TOOLCHAIN/bin/$ANDROID_TRIPLE_API-clang++

# ffmpeg
#FROM build-base AS build-ffmpeg

ARG ANDROID_FFMPEG_ABI=arm64
RUN tar Jxf <(wget -O- https://www.ffmpeg.org/releases/ffmpeg-7.1.tar.xz) \
 && cd ffmpeg-7.1 \
 && ./configure \
 --prefix="$SYSROOT/usr" \
 --ar="$TOOLCHAIN/bin/llvm-ar" \
 --nm="$TOOLCHAIN/bin/llvm-nm" \
 --ranlib="$TOOLCHAIN/bin/llvm-ranlib" \
 --cross-prefix="$TOOLCHAIN/bin/$ANDROID_TRIPLE_API-" \
 --target-os=android \
 --arch="$ANDROID_FFMPEG_ABI" \
 --disable-debug \
 --disable-programs \
 --disable-protocols \
 --disable-doc \
 --disable-sdl2 \
 --disable-avfilter \
 --disable-filters \
 --disable-iconv \
 --disable-network \
 --disable-muxers \
 --disable-postproc \
 --disable-swresample \
 --disable-swscale-alpha \
 --disable-dwt \
 --disable-lsp \
 --disable-faan \
 --disable-vaapi \
 --disable-vdpau \
 --disable-zlib \
 --disable-xlib \
 --disable-bzlib \
 --disable-lzma \
 --disable-encoders \
 --disable-decoders \
 --disable-demuxers \
 --disable-parsers \
 --disable-bsfs \
 --enable-demuxer=h264 \
 --enable-demuxer=mjpeg \
 --enable-parser=h264 \
 --enable-parser=mjpeg \
 --enable-decoder=h264 \
 --enable-decoder=mjpeg \
 --enable-decoder=rawvideo \
 --sysroot="$SYSROOT" \
 && make "-j$(nproc)" \
 && make install \
 && rm -rf /work/build

# libexif
#FROM build-base AS build-libexif

RUN tar jxf <(wget -O- https://github.com/libexif/libexif/releases/download/v0.6.24/libexif-0.6.24.tar.bz2) \
 && cd libexif-0.6.24 \
 && ln -s "$TOOLCHAIN/bin/llvm-ar" "$TOOLCHAIN/bin/armv7a-linux-androideabi-ar" \
 && ./configure --prefix="$SYSROOT/usr" --host="$ANDROID_TRIPLE" --with-sysroot="$SYSROOT" --disable-shared \
 && make "-j$(nproc)" \
 && make install \
 && rm -rf /work/build

# libqrencode
#FROM build-base AS build-libqrencode

RUN tar zxf <(wget -O- https://github.com/fukuchi/libqrencode/archive/refs/tags/v4.1.1.tar.gz) \
 && cd libqrencode-4.1.1 \
 && autoreconf -fi \
 && ./configure --prefix="$SYSROOT/usr" --host="$ANDROID_TRIPLE" --with-sysroot="$SYSROOT" --disable-shared --without-png CFLAGS=-fPIC \
 && make "-j$(nproc)" \
 && make install \
 && rm -rf /work/build

# libsodium
#FROM build-base AS build-libsodium

RUN tar zxf <(wget -O- https://github.com/jedisct1/libsodium/releases/download/1.0.20-RELEASE/libsodium-1.0.20.tar.gz) \
 && cd libsodium-1.0.20 \
 && ./configure --prefix="$SYSROOT/usr" --host="$ANDROID_TRIPLE" --with-sysroot="$SYSROOT" --disable-shared \
 && make "-j$(nproc)" \
 && make install \
 && rm -rf /work/build

# sqlcipher
#FROM build-base AS build-sqlcipher

#COPY --from=build-openssl $SYSROOT/usr $SYSROOT/usr

RUN tar zxf <(wget -O- https://github.com/sqlcipher/sqlcipher/archive/refs/tags/v4.6.1.tar.gz) \
 && cd sqlcipher-4.6.1 \
 && ./configure --prefix="$SYSROOT/usr" --host="$ANDROID_TRIPLE" --with-sysroot="$SYSROOT" --disable-shared CFLAGS=-fPIC \
 && make "-j$(nproc)" BCC="/usr/bin/gcc -g -DSQLCIPHER_CRYPTO_OPENSSL" \
 && make install \
 && rm -rf /work/build

# opus
#FROM build-base AS build-opus

RUN tar zxf <(wget -O- https://github.com/xiph/opus/releases/download/v1.5.2/opus-1.5.2.tar.gz) \
 && cd opus-1.5.2 \
 && ./configure --prefix="$SYSROOT/usr" --host="$ANDROID_TRIPLE" --with-sysroot="$SYSROOT" --disable-shared \
 && make "-j$(nproc)" \
 && make install \
 && rm -rf /work/build

# libvpx
#FROM build-base AS build-libvpx

ARG ANDROID_VPX_ABI=arm64-android-gcc
RUN tar zxf <(wget -O- https://github.com/webmproject/libvpx/archive/refs/tags/v1.15.0.tar.gz) \
 && cd libvpx-1.15.0 \
 && ./configure --prefix="$SYSROOT/usr" --libc="$SYSROOT" --target="$ANDROID_VPX_ABI" --disable-examples --disable-unit-tests --enable-pic \
 && sed -i -e "s!^AS=as!AS=$TOOLCHAIN/bin/$ANDROID_TRIPLE_API-clang -c!" *.mk \
 && sed -i -e "s!^STRIP=strip!STRIP=$TOOLCHAIN/bin/llvm-strip!" *.mk \
 && make "-j$(nproc)" \
 && make install \
 && rm -rf /work/build

# openal
#FROM build-base AS build-openal

RUN tar jxf <(wget -O- https://github.com/kcat/openal-soft/releases/download/1.23.1/openal-soft-1.23.1.tar.bz2) \
 && cd openal-soft-1.23.1 \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DANDROID_ABI="$ANDROID_ABI" \
  -DANDROID_PLATFORM="$ANDROID_API" \
  -DLIBTYPE=STATIC \
  -GNinja \
  -B_build \
  -H. \
  -Wno-dev \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /work/build

# toxcore
#FROM build-base AS build-toxcore

#COPY --from=build-libsodium $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-libvpx $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-opus $SYSROOT/usr $SYSROOT/usr

RUN tar zxf <(wget -O- https://github.com/TokTok/c-toxcore/releases/download/v0.2.20/c-toxcore-0.2.20.tar.gz) \
 && cd c-toxcore-0.2.20 \
 && cmake \
  -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$SYSROOT/usr" \
  -DANDROID_ABI="$ANDROID_ABI" \
  -DANDROID_PLATFORM="$ANDROID_API" \
  -DBOOTSTRAP_DAEMON=OFF \
  -DENABLE_SHARED=OFF \
  -GNinja \
  -B_build \
  -H. \
 && cmake --build _build \
 && cmake --install _build \
 && rm -rf /work/build

# Collect all the sysroot-installed builds into one directory.
#FROM build-base AS compose

#COPY --from=build-ffmpeg $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-libexif $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-libqrencode $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-openal $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-sqlcipher $SYSROOT/usr $SYSROOT/usr
#COPY --from=build-toxcore $SYSROOT/usr $SYSROOT/usr

# Final image composition (deduplicating the sysroot files).
#FROM build-base

# We need host-Qt as well here.
#COPY --from=host-qt /work/host/qt /work/host/qt

# Copy all the libraries other than Qt.
#COPY --from=compose $SYSROOT/usr $SYSROOT/usr

# Biggest build comes last. All others can be copied before Qt finishes building.
#COPY --from=build-qt /work/android/qt /work/android/qt

# Make .android world-writable (like /tmp) so debug signing works.
RUN ["chmod", "1777", "/work/android/sdk/.android"]

WORKDIR /qtox
ENV HOME=/qtox
